#!/usr/bin/env python

import ldap
import SocketServer
import SimpleXMLRPCServer
import logging
import logging.handlers
import os
import sys
import getopt
#from ConfigParser import *
from ConfigParser import SafeConfigParser
import MySQLdb
import base64

# Lets go multi-thread (Threaded mix-in) 
class AsyncXMLRPCServer(SocketServer.ThreadingMixIn,
                        SimpleXMLRPCServer.SimpleXMLRPCServer): pass

# DA(t)A in hex is 3498
defport = 3498

binddn = ""
bindpass = ""
ldapserver = ""
userdn = ""
groupdn = ""
debug_mode = False
conf_file = ""
port = 0

# data acces mode (r/w)
AUTHMODE_NONE = 0
AUTHMODE_READ = 1
AUTHMODE_WRITE = 2

# data types
# non empty string
VARTYPE_STRING = "S"
# base64 stored text
VARTYPE_PASSWORD = "P"
# any value, including empty string
VARTYPE_ANY = "A"
# file
VARTYPE_FILE = "F"

#if len(sys.argv) > 1:
#    port = int(sys.argv[1])

# Set up logging
#logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler(address = '/dev/log')
formatter = logging.Formatter('%(module)s.%(funcName)s: %(message)s')
handler.setFormatter(formatter)
log.addHandler(handler)

def usage(param=''):
	if param:
		print "Undefined parameter: "+param

	print 'Usage: '+sys.argv[0]+' -l LDAP_URI -u USER_DN -g GROUP_DN [-p PORT_NUMBER]'


# Create a class with exposed methods
class RPCObject(object):
	def _get_groups(self, username, userpass):
		valid_user = False
		log_message = 'user validation error'
		if username == 'anonymous':
			log_message = 'anonymous user is ever welcome ...'
			valid_user = True
			glist = [ username ]
		else:
			# validate credentials in ldap ...
			try:
				ld=ldap.initialize(ldapserver)
				ld.protocol_version = ldap.VERSION3	
				dn = "uid="+username+","+userdn
				ld.simple_bind_s(dn,userpass)
				valid_user = True
				glist = [ 'anonymous', username ]
			except ldap.LDAPError, e:
				valid_user = False	
		if valid_user:
			log_message = 'user validation successfully'
		else:
			glist = []
		
		if debug_mode:
			log.debug('validate_user(%s): '+log_message, username)
		# get group list
		searchScope = ldap.SCOPE_SUBTREE
		retrieveAttributes = [ 'cn' ] 
		searchFilter = "memberuid="+username
		try:
			if binddn and bindpass:
				ld.simple_bind_s(binddn, bindpass)

			ldap_result_id = ld.search(groupdn, searchScope, searchFilter, retrieveAttributes)
			while 1:
				result_type, result_data = ld.result(ldap_result_id, 0)
				if (result_data == []):
					break
				else:
					if result_type == ldap.RES_SEARCH_ENTRY:
						#glist.append(result_data)
						glist.append('@'+result_data[0][1]['cn'][0])
			log_message = 'search successfully'

		except ldap.LDAPError, e:
			log_message = 'search error'

		if debug_mode:
			log.debug('get_groups(%s): '+log_message, username)
		return glist

	def _test_auth_var(self, username, userpass, namespace, varname, accesslevel):
		return self._test_auth(username, userpass, namespace, varname, accesslevel, False)

	def _test_auth_file(self, username, userpass, namespace, varname, accesslevel):
		return self._test_auth(username, userpass, namespace, varname, accesslevel, True)

	def _test_auth(self, username, userpass, namespace, varname, accesslevel, filemode=False):
		auth_user = False
		if filemode:
			selectindex = 1
		else:
			selectindex = 0

		#search in database
		try:
			# connect
			db = MySQLdb.connect(host=dbhost, user=dbuser, passwd=dbpass, db=dbname)	
			cur = db.cursor() 
			for g in self._get_groups(username, userpass):
				# do SQL query
				cur.execute("SELECT authvar,authfile FROM auth WHERE username='%s' AND namespace='%s' AND (varname='%s' OR varname='' OR varname IS NULL);" % (g, namespace, varname))
				# print all the first cell of all the rows
				for row in cur.fetchall() :
					if ( row[selectindex] >= accesslevel ):
						auth_user = True
						break
			cur.close()
			db.close()
			log_message = "Successfully access to database"
		except:
			log_message = "Error accessing database"
				
		if debug_mode:
			log.debug('database access: '+log_message)

		return auth_user

	def _is_valid_data(self, varvalue, vartype):
		if ( vartype == VARTYPE_STRING):
			if ( varvalue == '' ):
				return False
		return True
	
	def put_value(self, username, userpass, namespace, varname, varvalue, vartype=VARTYPE_STRING):
		put_result = False
		log_message = "put_value: not authorized"
		if not self._is_valid_data(varvalue, vartype):
			log_message = "put_value: invalid data"
		elif self._test_auth_var(username, userpass, namespace, varname, AUTHMODE_WRITE):
			# prepare data
			if ( vartype == VARTYPE_PASSWORD ):
				varvalue = base64.b64encode(varvalue)

			try:
				# connect
				db = MySQLdb.connect(host=dbhost, user=dbuser, passwd=dbpass, db=dbname)
				cur = db.cursor()
				try:
					cur.execute("SELECT * FROM varvalues WHERE namespace='%s' AND varname='%s';" % (namespace, varname))
					if len(cur.fetchall()) > 0 :
						# do update
						cur.execute("UPDATE varvalues SET varvalue='%s', vartype='%s' WHERE namespace='%s' AND varname='%s';" % (varvalue, vartype, namespace, varname))
					else:
						# do insert
						cur.execute("INSERT INTO varvalues(namespace, varname, varvalue, vartype) VALUES ('%s', '%s', '%s', '%s');" % (namespace, varname, varvalue, vartype))
			
					db.commit()
				except:
					# Rollback in case there is any error
					db.rollback()

				cur.close()
				db.close()
				log_message = "successfully put_value"
				put_result = True
			except:
				log_message = "error in  put_value"
		return put_result	
			
	def del_value(self, username, userpass, namespace, varname):
		del_result = False
		log_message = "del_value: not authorized"
		if self._test_auth_var(username, userpass, namespace, varname, AUTHMODE_WRITE):
			try:
				# connect
				db = MySQLdb.connect(host=dbhost, user=dbuser, passwd=dbpass, db=dbname)
				cur = db.cursor()
				cur.execute("DELETE FROM varvalues WHERE namespace='%s' AND varname='%s';" % (namespace, varname))
				log_message = "del_value: success"
				cur.close()
				db.close()
				del_result = True
			except:
				log_message = "del_value: error deleting value"
				
		if debug_mode:
			log.debug(log_message)
				
			
		return del_result

	def get_value(self, username, userpass, namespace, varname):
		log_message = "get_value: not authorized"
		get_result = ""
		if self._test_auth_var(username, userpass, namespace, varname, AUTHMODE_READ):
			try:
				# connect
				db = MySQLdb.connect(host=dbhost, user=dbuser, passwd=dbpass, db=dbname)
				cur = db.cursor() 
				cur.execute("SELECT varvalue, vartype FROM varvalues WHERE namespace='%s' AND varname='%s';" % (namespace, varname))
				# get_result = (cur.fetchall())[0][0]
				first_row =(cur.fetchall())[0]
				# prepare data
				if ( first_row[1] == VARTYPE_PASSWORD ):
					get_data = base64.b64decode(first_row[0])
				else:
					get_data = first_row[0]

				cur.close()
				db.close()
				log_message = "successfully get_value"
			except:
				log_message = "error in  get_value"

		if debug_mode:
			log.debug(log_message)

		return get_result

	def put_file(self, username, userpass, namespace, fname, arg):
		put_result = False
		log_message = "put_file: not authorized"
		if self._test_auth_file(username, userpass, namespace, fname, AUTHMODE_WRITE):
			# get path to store files
			try:
				# connect
				db = MySQLdb.connect(host=dbhost, user=dbuser, passwd=dbpass, db=dbname)
				cur = db.cursor()
				cur.execute("SELECT filepath FROM filepaths WHERE namespace='%s';" % (namespace))
				filepath = (cur.fetchall())[0][0]
				cur.close()
				db.close()
				# do update
				try:
					with open(filepath+"/"+os.path.basename(fname), "wb") as handle:
						handle.write(arg.data)
					handle.close()
					log_message = "file successfully write"
					put_result = True

				except:
					log_message = "error writing file"

			except:
				log_message = "error reading path"

		if debug_mode:
			log.debug('put_file(%s): '+log_message, fname)

		return put_result

	def del_file(self, username, userpass, namespace, fname):
		del_result = False
		log_message = "del_file: not authorized"
		if self._test_auth_file(username, userpass, namespace, fname, AUTHMODE_WRITE):
			# get path to store files
			try:
				# connect
				db = MySQLdb.connect(host=dbhost, user=dbuser, passwd=dbpass, db=dbname)
				cur = db.cursor()
				cur.execute("SELECT filepath FROM filepaths WHERE namespace='%s';" % (namespace))
				filepath = (cur.fetchall())[0][0]
				cur.close()
				db.close()
				# do update
				try:
					os.remove(filepath+"/"+os.path.basename(fname))
					log_message = "file successfully deleted"
					del_result = True

				except:
					log_message = "error deleting file"

			except:
				log_message = "error reading path"

		if debug_mode:
			log.debug('del_file(%s): '+log_message, fname)

		return del_result

	def get_file(self, username, userpass, namespace, fname):
		log_message = "get_file: not authorized"
		binary_data = xmlrpclib.Binary('')
		if self._test_auth_file(username, userpass, namespace, fname, AUTHMODE_WRITE):
			# get path where files are stored
			try:
				# connect
				db = MySQLdb.connect(host=dbhost, user=dbuser, passwd=dbpass, db=dbname)
				cur = db.cursor()
				cur.execute("SELECT filepath FROM filepaths WHERE namespace='%s';" % (namespace))
				filepath = (cur.fetchall())[0][0]
				cur.close()
				db.close()
				# do update
				try:

					with open(filepath+"/"+fname, "rb") as handle:
    						binary_data = xmlrpclib.Binary(handle.read())
					handle.close()
					log_message = "file successfully read"

				except:
					log_message = "error reading file"

			except:
				log_message = "error reading path"

		if debug_mode:
			log.debug('get_file(%s): '+log_message, fname)

		return binary_data

if __name__=="__main__":
	try:                                
		opts, args = getopt.getopt(sys.argv[1:], "dhl:p:u:g:f:", ["debug", "help", "ldap=", "port=", "userdn=", "groupdn=", "file="])
	except getopt.GetoptError:          
		usage()                         
		sys.exit(2)                     

	for opt, arg in opts:
		if opt in ("-h", "--help"):
			usage()
			sys.exit()
		elif opt in ("-d", "--debug"):
			debug_mode = True
		elif opt in ("-p", "--port"):
			port = int(arg)
		elif opt in ( "-l", "--ldap"):
			ldapserver = arg
		elif opt in ( "-u", "--userdn"):
			userdn = arg
		elif opt in ( "-g", "--groupdn"):
			groupdn = arg
		elif opt in ( "-f", "--file"):
			conf_file = arg

	parser = SafeConfigParser()
	parser.read(conf_file)

	if not debug_mode:
		try:
			dummy =parser.get('datastore', 'debug')
			debug_mode = True
		except:
			debug_mode = False

	if (port == 0) :
		try:
			port = int(parser.get('datastore', 'port'))
		except:
			port = defport

	if not ldapserver:
		try:
			ldapserver = parser.get('datastore', 'ldapserver')
		except:
			usage('ldapserver')
			sys.exit(2)
		
	if not userdn:
		try:
			userdn = parser.get('datastore', 'userdn')
		except:
			usage('userdn')
			sys.exit(2)
		
	if not groupdn:
		try:
			groupdn = parser.get('datastore', 'groupdn')
		except:
			usage('groupdn')                        
			sys.exit(2)
        
	try:
		dbhost = parser.get('datastore', 'dbserver')
	except:
		usage('dbserver')                        
		sys.exit(2)
		
	try:
		dbname = parser.get('datastore', 'dbname')
	except:
		usage('dbname')                        
		sys.exit(2)
		
	try:
		dbuser = parser.get('datastore', 'dbuser')
	except:
		usage('dbuser')                        
		sys.exit(2)
		
	try:
		dbpass = parser.get('datastore', 'dbpass')
		#dbpass = base64.b64decode(b64pass)
	except:
		usage('dbpass')                        
		sys.exit(2)

	try:
		binddn = parser.get('datastore', 'binddn')
	except:
		binddn = ""

	try:
		bindpass = parser.get('datastore', 'bindpass')
	except:
		bindpass = ""
		
	server = AsyncXMLRPCServer(('localhost',port))
	server.register_instance(RPCObject())
	try:
		print 'Use Control-C to exit'
		server.serve_forever()
	except KeyboardInterrupt:
		print 'Exiting'


