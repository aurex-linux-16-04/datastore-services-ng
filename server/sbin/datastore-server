#!/usr/bin/env python

import logging
import logging.handlers
import sys
import getopt
#from ConfigParser import *
from ConfigParser import SafeConfigParser
import base64

import datastore


# DA(t)A in hex is 3498
defport = 3498

binddn = ""
bindpass = ""
ldapserver = ""
userdn = ""
groupdn = ""
debug_mode = False
conf_file = ""
port = 0

#if len(sys.argv) > 1:
#    port = int(sys.argv[1])

def usage(param=''):
	if param:
		print "Undefined parameter: "+param

	print 'Usage: '+sys.argv[0]+' -l LDAP_URI -u USER_DN -g GROUP_DN [-p PORT_NUMBER]'

if __name__=="__main__":
	try:                                
		opts, args = getopt.getopt(sys.argv[1:], "dhl:p:u:g:f:", ["debug", "help", "ldap=", "port=", "userdn=", "groupdn=", "file="])
	except getopt.GetoptError:          
		usage()                         
		sys.exit(2)                     

	for opt, arg in opts:
		if opt in ("-h", "--help"):
			usage()
			sys.exit()
		elif opt in ("-d", "--debug"):
			debug_mode = True
		elif opt in ("-p", "--port"):
			port = int(arg)
		elif opt in ( "-l", "--ldap"):
			ldapserver = arg
		elif opt in ( "-u", "--userdn"):
			userdn = arg
		elif opt in ( "-g", "--groupdn"):
			groupdn = arg
		elif opt in ( "-f", "--file"):
			conf_file = arg

	parser = SafeConfigParser()
	parser.read(conf_file)

	if not debug_mode:
		try:
			dummy =parser.get('datastore', 'debug')
			debug_mode = True
		except:
			debug_mode = False

	if (port == 0) :
		try:
			port = int(parser.get('datastore', 'port'))
		except:
			port = defport

	if not ldapserver:
		try:
			ldapserver = parser.get('datastore', 'ldapserver')
		except:
			usage('ldapserver')
			sys.exit(2)
		
	if not userdn:
		try:
			userdn = parser.get('datastore', 'userdn')
		except:
			usage('userdn')
			sys.exit(2)
		
	if not groupdn:
		try:
			groupdn = parser.get('datastore', 'groupdn')
		except:
			usage('groupdn')                        
			sys.exit(2)
        
	try:
		dbhost = parser.get('datastore', 'dbserver')
	except:
		usage('dbserver')                        
		sys.exit(2)
		
	try:
		dbname = parser.get('datastore', 'dbname')
	except:
		usage('dbname')                        
		sys.exit(2)
		
	try:
		dbuser = parser.get('datastore', 'dbuser')
	except:
		usage('dbuser')                        
		sys.exit(2)
		
	try:
		dbpass = parser.get('datastore', 'dbpass')
		#dbpass = base64.b64decode(b64pass)
	except:
		usage('dbpass')                        
		sys.exit(2)

	try:
		binddn = parser.get('datastore', 'binddn')
	except:
		binddn = ""

	try:
		bindpass = parser.get('datastore', 'bindpass')
	except:
		bindpass = ""
		
	server = AsyncXMLRPCServer(('localhost',port))
	ds_auth = datastore.datastore_auth(ldapserver, userdn, groupdn, binddn, bindpass)
	ds_database = datastore.datastore_database(dbhost, dbuser, dppass, dbname)

	server.register_instance(datastore.datastore_server(ds_auth, ds_database, "", debug_mode))
	try:
		print 'Use Control-C to exit'
		server.serve_forever()
	except KeyboardInterrupt:
		print 'Exiting'


